import json
import matplotlib.pyplot as plt
import numpy as np

data = {"klassen": {}}
bool_question = False
bool_show = False

def load_data(filename="noten.json"):
    global data
    try:
        with open(filename, "r") as file:
            data = json.load(file)
    except FileNotFoundError:
        print("Keine vorhandene Daten gefunden. Eine neue Datei wird erstellt.")

def save_data(filename="noten.json"):
    with open(filename, "w") as file:
        json.dump(data, file, indent=4)

def questions():
    global klasse, fach, schueler, note, bool_question
    show_grades()

    klasse = input("\nKlasse: ")
    if klasse not in data["klassen"]:
        question_1 = input(f"{klasse} nicht gefunden. Wollen Sie die Klasse hinzufügen?: ")
        if question_1.lower() in 'jayes':
            data["klassen"][klasse] = {}
        else:
            bool_question = False
            return

    print("\nVerfügbare Fächer:")
    for fach in data["klassen"][klasse].keys():
        print(f"- {fach}")

    fach = input("Fach: ")
    if fach not in data["klassen"][klasse]:
        question_2 = input(f"{fach} nicht gefunden. Wollen Sie dieses Fach hinzufügen?: ")
        if question_2.lower() in 'jayes':
            data["klassen"][klasse][fach] = {}
        else:
            bool_question = False
            return

    print("\nVerfügbare Schüler:")
    for schueler in data["klassen"][klasse][fach].keys():
        print(f"- {schueler}")

    schueler = input("Schüler: ")
    if schueler not in data["klassen"][klasse][fach]:
        question_3 = input(f"{schueler} nicht gefunden. Wollen Sie diesen Schüler hinzufügen?: ")
        if question_3.lower() in 'jayes':
            data["klassen"][klasse][fach][schueler] = []
        else:
            bool_question = False
            return

    bool_question = True
    note = int(input("Note: "))

def show_grades():
    global bool_show
    print("\nVerfügbare Klassen:")
    for klasse in data["klassen"].keys():
        print(f"- {klasse}")

    if bool_show:
        klasse = input("\nFür welche Klasse möchten Sie die Noten anzeigen?: ")

        if klasse not in data["klassen"]:
            print(f"Klasse {klasse} nicht gefunden.")
            return

        faecher = data["klassen"][klasse]
        print(f"\nKlasse: {klasse}")
        for fach, schueler in faecher.items():
            print(f"  Fach: {fach}")
            for name, noten in schueler.items():
                print(f"    {name}: {noten}")

        bool_show = False

def add_grade(klasse, fach, schueler, note):
    if klasse not in data["klassen"]:
        data["klassen"][klasse] = {}
    if fach not in data["klassen"][klasse]:
        data["klassen"][klasse][fach] = {}
    if schueler not in data["klassen"][klasse][fach]:
        data["klassen"][klasse][fach][schueler] = []

    data["klassen"][klasse][fach][schueler].append(note)
    save_data()

def calculate_average():
    global bool_question
    print("\nVerfügbare Klassen:")
    for klasse in data["klassen"].keys():
        print(f"- {klasse}")

    klasse = input("\nFür welche Klasse möchten Sie die Durchschnittsnoten anzeigen?: ")
    if klasse not in data["klassen"]:
        question_1 = input(f"{klasse} nicht gefunden. Wollen Sie die Klasse hinzufügen? (ja/nein): ")
        if question_1.lower() in ['ja', 'yes']:
            data["klassen"][klasse] = {}
        else:
            bool_question = False
            return

    if not data["klassen"][klasse]:
        print(f"Keine Fächer für die Klasse {klasse} vorhanden.")
        return

    print(f"\nKlasse: {klasse}")
    for fach, schueler in data["klassen"][klasse].items():
        print(f"  Fach: {fach}")
        for name, noten in schueler.items():
            if noten:
                average = sum(noten) / len(noten)
            else:
                average = 0
            print(f"    {name}: Durchschnitt {average:.2f}")

def change_grade():
    global klasse, fach, schueler, note, bool_question

    klasse = input("\nKlasse: ")
    if klasse not in data["klassen"]:
        question_1 = input(f"{klasse} nicht gefunden. Wollen Sie die Klasse hinzufügen?: ")
        if question_1.lower() in 'jayes':
            data["klassen"][klasse] = {}
        else:
            bool_question = False
            return

    print("\nVerfügbare Fächer:")
    for fach in data["klassen"][klasse].keys():
        print(f"- {fach}")

    fach = input("Fach: ")
    if fach not in data["klassen"][klasse]:
        question_2 = input(f"{fach} nicht gefunden. Wollen Sie dieses Fach hinzufügen?: ")
        if question_2.lower() in 'jayes':
            data["klassen"][klasse][fach] = {}
        else:
            bool_question = False
            return

    print("\nVerfügbare Schüler:")
    for schueler in data["klassen"][klasse][fach].keys():
        print(f"- {schueler}")

    schueler = input("Schüler: ")
    if schueler not in data["klassen"][klasse][fach]:
        question_3 = input(f"{schueler} nicht gefunden. Wollen Sie diesen Schüler hinzufügen?: ")
        if question_3.lower() in 'jayes':
            data["klassen"][klasse][fach][schueler] = []
        else:
            bool_question = False
            return

    noten = data["klassen"][klasse][fach][schueler]
    print(f"Aktueller Noten für {schueler} in {fach} der Klasse {klasse}: {noten}")

    try:
        alte_note = int(input("Welche Note möchten Sie ändern?: "))
        if alte_note not in noten:
            print(f"Note {alte_note} nicht gefunden.")
            return

        neue_note = int(input("Neue Note: "))
        index = noten.index(alte_note)
        noten[index] = neue_note
        print(f"Note {alte_note} wurde zu {neue_note} geändert.")
        save_data()

    except ValueError:
        print("Ungültige Eingabe. Bitte geben Sie eine gültige Zahl ein.")

def delete_grade():
    global klasse, fach, schueler, note, bool_question

    klasse = input("\nKlasse: ")
    if klasse not in data["klassen"]:
        question_1 = input(f"{klasse} nicht gefunden. Wollen Sie die Klasse hinzufügen?: ")
        if question_1.lower() in 'jayes':
            data["klassen"][klasse] = {}
        else:
            bool_question = False
            return

    print("\nVerfügbare Fächer:")
    for fach in data["klassen"][klasse].keys():
        print(f"- {fach}")

    fach = input("Fach: ")
    if fach not in data["klassen"][klasse]:
        question_2 = input(f"{fach} nicht gefunden. Wollen Sie dieses Fach hinzufügen?: ")
        if question_2.lower() in 'jayes':
            data["klassen"][klasse][fach] = {}
        else:
            bool_question = False
            return

    print("\nVerfügbare Schüler:")
    for schueler in data["klassen"][klasse][fach].keys():
        print(f"- {schueler}")

    schueler = input("Schüler: ")
    if schueler not in data["klassen"][klasse][fach]:
        question_3 = input(f"{schueler} nicht gefunden. Wollen Sie diesen Schüler hinzufügen?: ")
        if question_3.lower() in 'jayes':
            data["klassen"][klasse][fach][schueler] = []
        else:
            bool_question = False
            return

    noten = data["klassen"][klasse][fach][schueler]
    print(f"Aktueller Noten für {schueler} in {fach} der Klasse {klasse}: {noten}")

    try:
        del_note = int(input("Welche Note möchten Sie löschen?: "))
        if del_note not in noten:
            print(f"Note {del_note} nicht gefunden.")
            return

        noten.remove(del_note)
        print(f"Note {del_note} wurde gelöscht.")
        save_data()

    except ValueError:
        print("Ungültige Eingabe. Bitte geben Sie eine gültige Zahl ein.")

def del_student():
    global klasse, fach, schueler, note

    print("\nVerfügbare Fächer:")
    for fach in data["klassen"][klasse].keys():
        print(f"- {fach}")

    klasse = input("\nKlasse: ")
    if klasse not in data["klassen"]:
        print(f"Klasse {klasse} nicht gefunden.")
        return

    print("\nVerfügbare Fächer:")
    for fach in data["klassen"][klasse].keys():
        print(f"- {fach}")

    fach = input("Fach: ")
    if fach not in data["klassen"][klasse]:
        print(f"Fach {fach} in Klasse {klasse} nicht gefunden.")
        return

    students = data["klassen"][klasse][fach]
    print(f"Aktuelle Schüler in Fach {fach} der Klasse {klasse}: {list(students.keys())}")

    schueler = input("Welche Schüler möchten Sie löschen?: ")
    if schueler not in data["klassen"][klasse][fach]:
        print(f"Schüler {schueler} in Fach {fach} der Klasse {klasse} nicht gefunden.")
        return

    confirm = input(f"Sind Sie sicher, dass Sie {schueler} löschen möchten? (ja/nein): ")
    if confirm.lower() in ['ja', 'yes']:
        del data["klassen"][klasse][fach][schueler]
        print(f"Schüler {schueler} wurde gelöscht.")
        save_data()
    else:
        print("Löschvorgang abgebrochen.")

def plt_data():
    classes_subjects = []
    grades_distribution = {i: [] for i in range(1, 7)}  # Grades 1 to 6

    for klasse, faecher in data["klassen"].items():
        for fach, schueler in faecher.items():
            grades = []
            for name, noten in schueler.items():
                grades.extend(noten)

            if grades:
                classes_subjects.append(f"{klasse} - {fach}")
                for grade in range(1, 7):
                    grades_distribution[grade].append(grades.count(grade))
            else:
                print(f"Keine Noten vorhanden für Klasse {klasse}, Fach {fach}.")

    bar_width = 0.1
    x = np.arange(len(classes_subjects))
    for grade in range(1, 7):
        plt.bar(x + (grade - 1) * bar_width, grades_distribution[grade], width=bar_width, label=f'Note {grade}')

    plt.xlabel('Klasse - Fach')
    plt.ylabel('Anzahl der Noten')
    plt.title('Notenspiegel für alle Klassen und Fächer')
    plt.xticks(x + bar_width * 2.5, classes_subjects, rotation=90)
    plt.legend()
    plt.tight_layout()
    plt.show()

def main_menu():
    global bool_show
    while True:
        print(f"\n[1] Klasse / Schüler / Note hinzufügen\n"
              f"[2] Noten anzeigen\n"
              f"[3] Notendurchschnitt errechnen\n"
              f"[4] Note aktualisieren\n"
              f"[5] Note löschen\n"
              f"[6] Schüler löschen\n"
              f"[7] Klassenspiegel visualisieren\n"
              f"[8] Beenden\n")

        choice = input("Wählen Sie eine Option: ")

        if choice == '1':
            questions()
            if bool_question:
                add_grade(klasse, fach, schueler, note)

        elif choice == '2':
            bool_show = True
            show_grades()

        elif choice == '3':
            calculate_average()

        elif choice == '4':
            show_grades()
            change_grade()

        elif choice == '5':
            show_grades()
            delete_grade()

        elif choice == '6':
            show_grades()
            del_student()

        elif choice == '7':
            plt_data()

        elif choice == '8':
            break
        else:
            print("Ungültige Auswahl, bitte erneut versuchen.")

if __name__ == "__main__":
    load_data()
    main_menu()
    save_data()
