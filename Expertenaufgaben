"""
-----------------------------------------------------------------------------------------------------------------------

Expertenaufgaben aus dem SD2 Unterricht.

Inhaltsverzeichnis:
    - Passwortprüfer
    - Passwortgenerator
    - Schiffe versenken
    - Klick - Spiel
    - Sportaktivitäten
    - Glückliche Zahlen

-----------------------------------------------------------------------------------------------------------------------

"""

"""
# import random
# import string
# import pygame
"""

#######################################################################################################################
#                                               Passwortprüfer                                                        #
#######################################################################################################################

"""
# Liste der Sonderzeichen
sonderzeichen = ['?', '!', '§', '$', '%', '&', '/', '(', ')', '=', '@', '€', '{', '[', ']', '}', '<', '>', '-', '_',
                 '.', ',', ':', ';', '+', '*', '#']

# Boolean für Sonderzeichen
zeichen = False

# Boolean für Großbuchstaben
buchstabe = False
buchstabe2 = False


# Funktion
def check_passwort():
    global zeichen, buchstabe, buchstabe2

    # Check auf 12 Buchstaben
    if len(passwort) >= 12:
        for i in passwort:
            if i in sonderzeichen:
                zeichen = True

        # Check auf Sonderzeichen
        if zeichen:
            for i in passwort:
                if i.isupper():
                    buchstabe = True
                if i.islower():
                    buchstabe2 = True

            # Check auf Groß-/Kleinbuchstaben
            if buchstabe and buchstabe2:
                print("Passwort akzeptiert !")

            # Fehlerausgabe Großbuchstaben
            elif not buchstabe:
                print("Kein Großbuchstabe !")
                
            # Fehlerausgabe Kleinbuchstaben
            elif not buchstabe2:
                print("Kein Kleinbuchstabe !")

        # Fehlerausgabe Sonderzeichen
        else:
            print("kein Sonderzeichen !")

    # Fehlerausgabe Passwortlänge
    else:
        print("Passwort ist kürzer als 12 Zeichen !")


# Passworteingabe
passwort = input("Passwort eingeben: ")

# Aufrufen der Funktion
check_passwort()
"""

#######################################################################################################################
#                                               Passwortgenerator                                                     #
#######################################################################################################################

"""
# Anzahl der Zeichen
anzahl = 12


# Funktion
def generate_password():
    global anzahl
    
    # Alle möglichen Zeichen
    characters = string.ascii_letters + string.digits + string.punctuation

    # Erstelle das Passwort aus den Zeichen aus der variable 'characters'
    password = ''.join(random.choice(characters) for i in range(anzahl))
    return password


# Funktionsaufruf + Ausgabe
print(generate_password())
"""

#######################################################################################################################
#                                               Schiffe versenken                                                     #
#######################################################################################################################

"""
# Spielfeld erstellen
def erstelle_spielfeld(size):
    spielfeld = [['     '] + [f'[{i + 1:2d} ]' for i in range(size)]]
    # Hinzufügen der Überschrift für die Spalten
    # Hinzufügen der Zeilen
    for i in range(size):
        spielfeld.append(
            [f'[{i + 1:2d} ]'] + ["[   ]"] * size)  # Hier füge ich die Zeilennummerierung hinzu (von 1 bis size)

    return spielfeld

# Spielfeld anzeigen
def anzeigen_spielfeld(spielfeld):
    for row in spielfeld:
        print(' '.join(row))


# Schiffe auf dem Spielfeld platzieren
def schiffe_platzieren(spielfeld, num_ships):
    for _ in range(num_ships):
        row = random.randint(1, len(spielfeld) - 1)
        col = random.randint(1, len(spielfeld) - 1)
        spielfeld[row][col] = "[ 0 ]"


# Überprüfen ob der Spieler ein Schiff getroffen hat
def check_schuss(spielfeld, row, col):
    if spielfeld[row][col] == "[ 0 ]":
        spielfeld[row][col] = "[ X ]"
        return True
    else:
        spielfeld[row][col] = "[ M ]"
        return False

# Spiel-Abbruch-Bedingung
def game_over(spielfeld):
    for row in spielfeld:
        if "[ 0 ]" in row:
            return False
    return True

# Main-Funktion
def spielen(size):
    spielfeld = erstelle_spielfeld(9)

    schiffe_platzieren(spielfeld, 10)

    while not game_over(spielfeld):
        print(" \n")
        anzeigen_spielfeld(spielfeld)
        try:
            print("\n")
            guess_row = int(input("Wähle eine Reihe (1 - " + str(size) + "): "))
            guess_col = int(input("Wähle eine Spalte (1 - " + str(size) + "): "))
        except ValueError:
            print("Ungültige Eingabe. Bitte gib ganze Zahlen ein.")
            continue

        if guess_row < 0 or guess_row > size or guess_col < 0 or guess_col > size:
            print("Ungültige Koordinaten. Bitte versuche es erneut.")
            continue

        if check_schuss(spielfeld, guess_row, guess_col):
            print("\n")
            print("Treffer! Gut gemacht.")
        else:
            print("----------------------------------------------------------\n")
            print("Verfehlt. Versuche es noch einmal.")

    print("Glückwunsch! Du hast alle Schiffe versenkt.")


# Starten des Spiels
spielen(9)
"""

#######################################################################################################################
#                                                      Klick-Spiel                                                    #
#######################################################################################################################

"""
# Bibliothek initialisieren
pygame.init()

# Farben
BLACK = 0, 0, 0
WHITE = 255, 255, 255
RED = 255, 0, 0
GREEN = 0,255, 0

# Spielfeldgröße
height = 600
width = 600

# Fenster erstellen
screen = pygame.display.set_mode((height, width))

# Punkte
score = 0

# Uhr bestimmen für die Spielzeit
clock = pygame.time.Clock()

# Schriftart und Größe
font = pygame.font.Font(None, 36)

# Überschrift
pygame.display.set_caption("Yannicks Klick Game!")

# Definieren des Rechtecks
rect_x = random.randint(0, width - 100)
rect_y = random.randint(30, height - 100)
rect_width = 100
rect_height = 100

# Spielzeit
time_limit = 30.9

# Variable zur Bestimmung der Spielzeit
start_time = pygame.time.get_ticks()

# Funktion zum Anzeigen von Texten
def display_text(text, color, x, y):
    text_surface = font.render(text, True, color)
    screen.blit(text_surface, (x, y))


# Hauptschleife des Spiels
def main():
    global score, rect_x, rect_y, start_time

    running = True
    game_over = False

    while running:
        screen.fill(BLACK)

        # Anzeigen des Rechtecks
        pygame.draw.rect(screen, WHITE, (rect_x, rect_y, rect_width, rect_height))

        # Spielabbruch bedingung
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                
            # User-Command für das Klicken auf die Rechtecke
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_x, mouse_y = pygame.mouse.get_pos()
                
                # Wenn User trifft -> Punkte +1 & Rechteck verschieben
                if rect_x <= mouse_x <= rect_x + rect_width and rect_y <= mouse_y <= rect_y + rect_height:
                    score += 1
                    rect_x = random.randint(0, width - 100)
                    rect_y = random.randint(0, height - 100)
                    
                # Wenn User verfehlt -> Punkte = 0 & Spielzeit reset
                else:
                    score = 0
                    start_time = pygame.time.get_ticks()

        # Berechnen der Spielzeit
        current_time = pygame.time.get_ticks()
        elapsed_time = (current_time - start_time) / 1000
        remaining_time = time_limit - elapsed_time

        # Anzeigen der Punkte und Spielzeit während des Spiels
        if not game_over:
            display_text(f"Punkte: {score}", GREEN, 10, 10)
            display_text(f"Zeit: {int(remaining_time)}", GREEN, width // 2 - 50, 10)

            if remaining_time <= 0:
                game_over = True

        # Anzeigen der Punkte und Hinweis das Spiel neu zu starten
        if game_over:
            display_text("Spiel vorbei", RED, width // 2 - 80, height // 2 - 100)
            display_text("Für Neustart 'LEERTASTE'", RED, width // 2 - 140, height // 2 + 50)
            display_text(f"Punkte: {score}", RED, width // 2 - 65, height // 2 - 50 )
            pygame.display.update()

            # Hauptschleife des Spiels
            while game_over:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        running = False
                        game_over = False
                    elif event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                        game_over = False
                        score = 0
                        rect_x = random.randint(0, width - 100)
                        rect_y = random.randint(0, height - 100)
                        start_time = pygame.time.get_ticks()
                        break

        pygame.display.update()
        
        # Anzahl der Aktualisierungen des Spiels pro Sekunde
        clock.tick(60)

# Aufrufen der Hauptschleife
main()

pygame.quit()
"""

#######################################################################################################################
#                                                Sportaktivitäten                                                     #
#######################################################################################################################

"""
# Klasse für die Sportaktivitäten
class SportActivity:
    def __init__(self, name, max_participants, duration_hours, days_and_times, required_experience="Keine"):
        self.name = name
        self.max_participants = max_participants
        self.duration_hours = duration_hours
        self.days_and_times = days_and_times
        self.required_experience = required_experience

    # Funktion zur Ausgabe der einzelnen Aktivitäten
    def display_info(self):
        print("Aktivität:", self.name)
        print("Maximale Teilnehmerzahl:", self.max_participants)
        print("Kursdauer:", self.duration_hours, "Stunden")
        print("Termine:", self.days_and_times)
        print("Erforderliche Vorkenntnisse:", self.required_experience)
        print()


# Erstellung der Aktivität und Ausgabe der gewählten Aktivität
def main():
    global auswahl
    
    # Erstellung der Sportaktivitäten
    mountainbike = SportActivity("Mountainbike fahren", 10, 2, "Montag bis Freitag ab 18 Uhr")
    klettern = SportActivity("Klettern", 6, 2, "Dienstag 20 bis 22 Uhr", "Vorkenntnisse erforderlich")
    aerobic_i = SportActivity("Aerobic Stufe I (Anfänger)", 15, 1, "Montag 17 bis 18 Uhr")
    aerobic_ii = SportActivity("Aerobic Stufe II (mit Vorkenntnissen)", 12, 1, "Mittwoch 9 bis 10 Uhr")
    aerobic_iii = SportActivity("Aerobic Stufe III (Experten)", 10, 1, "Freitag 20 bis 21 Uhr")
    zumba = SportActivity("Zumba", 20, 1, "Donnerstag 20 bis 21 Uhr")
    billard = SportActivity("Billard", 8, None, "Freitag ab 18 Uhr")
    bowling = SportActivity("Bowling", 24, None, "Montag ab 19 Uhr")
    yoga = SportActivity("Yoga", 15, 2, "Mittwoch 18 bis 20 Uhr")

    if auswahl == "mountainbike":
        mountainbike.display_info()
    if auswahl == "klettern":
        klettern.display_info()
    if auswahl == "aerobic1":
        aerobic_i.display_info()
    if auswahl == "aerobic2":
        aerobic_ii.display_info()
    if auswahl == "aerobic3":
        aerobic_iii.display_info()
    if auswahl == "zumba":
        zumba.display_info()
    if auswahl == "billard":
        billard.display_info()
    if auswahl == "bowling":
        bowling.display_info()
    if auswahl == "yoga":
        yoga.display_info()


# Ausgabe der möglichen Aktivitäten
print("\n")
print("Die Aktivitäten stehen zur Verfügung:    [Auswahlmöglichkeiten]")
print("\n")
print("Mountainbike fahren                      [mountainbike]")
print("Klettern                                 [klettern]")
print("Aerobic Stufe 1 (für Anfänger)           [aerobic1]")
print("Stufe 2 (mit Vorkenntnissen)             [aerobic2")
print("Stufe 3 (Experten)                       [aerobic3]")
print("Zumba                                    [zumba]")
print("Billard                                  [billard]")
print("Bowling                                  [bowling]")
print("Yoga                                     [yoga]")
print("\n")

# User - Input
auswahl = input("Welche Aktivität wollen Sie sich angucken ?").lower()

main()
"""

#######################################################################################################################
#                                                Glückliche Zahlen                                                    #
#######################################################################################################################

"""

lucky_numbers = []

for i in range(1, int(input("Wie viele Zahlen? ")) + 1):
    lucky_numbers.append(i)
x = 2

while x < len(lucky_numbers):

    for i in range(len(lucky_numbers)):
        if ((i + 1) % x) == 0:
            lucky_numbers[i] = "x"

    j = 0

    for i in lucky_numbers:
        if i == "x":
            lucky_numbers.pop(j)
        j += 1

    for b in lucky_numbers:
        if x < b:
            x = b
            break

print(lucky_numbers)

"""
